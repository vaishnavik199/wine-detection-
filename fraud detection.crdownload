#!/usr/bin/env python
# coding: utf-8

# In[7]:


import pandas as pd

# Load the wine quality dataset
dataset_path = "wineQT.csv"  # Replace with actual path
wine_data = pd.read_csv(dataset_path)

# Clean the data (remove duplicates, handle missing values, etc.) if necessary
# Example:
wine_data.drop_duplicates(inplace=True)
wine_data.dropna(inplace=True)


# In[11]:


wine_data.head()


# In[12]:


from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.svm import SVC

# Initialize classifier models
rf_model = RandomForestClassifier()
sgd_model = SGDClassifier()
svc_model = SVC()


# In[13]:


# Define features and target variable
X = wine_data[['volatile acidity', 'fixed acidity','citric acid','residual sugar','chlorides', 'free sulfur dioxide','total sulfur dioxide','density','pH' ,'sulphates','alcohol']]  # Add other relevant features
y = wine_data['quality']


# In[14]:


import numpy as np

# Use Pandas for data manipulation and Numpy for array operations
# Example:
mean_density = np.mean(wine_data['density'])


# In[15]:


import seaborn as sns
import matplotlib.pyplot as plt

# Use Seaborn and Matplotlib for visualizing patterns and insights
# Example:
sns.boxplot(x='quality', y='density', data=wine_data)
plt.title('Density vs. Wine Quality')
plt.xlabel('Quality')
plt.ylabel('Density')
plt.show()


# In[16]:


from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the models
rf_model.fit(X_train, y_train)
sgd_model.fit(X_train, y_train)
svc_model.fit(X_train, y_train)

# Evaluate the models
rf_accuracy = accuracy_score(y_test, rf_model.predict(X_test))
sgd_accuracy = accuracy_score(y_test, sgd_model.predict(X_test))
svc_accuracy = accuracy_score(y_test, svc_model.predict(X_test))

print("Random Forest Accuracy:", rf_accuracy)
print("Stochastic Gradient Descent Accuracy:", sgd_accuracy)
print("Support Vector Classifier Accuracy:", svc_accuracy)


# In[ ]:




